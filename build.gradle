
// plugin for just running stuff
plugins {
    id "application"
    id 'java'
}
// java !
apply plugin : "java"

// repo we can yoink dependencies (like JUnit & soot) from
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// could move up to java 21 ?
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// tell the Application plugin what our main class is if we want one
// it should probably have a main method in it
// but we don't really have an applicable one anymore :shrug:
application {
    mainClassName = "analysis.RTA.RTA"
}

// add JUnit & soot
dependencies {
    // Use JUnit 4 in test source set only
    testImplementation 'junit:junit:4.13.2'
    // required for junit 4 to run on annotations
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.8.2")
    // TODO: junit5 ?
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // grab soot
    implementation "org.soot-oss:soot:4.4.1"
}

// make the test task use JUnit
test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// task to compile the sample programs found in src/main/resources/programs/...
task 'compileSamplePrograms'{
    SourceSet srcSetEntry = sourceSets.getByName("main") // grab main source set entry
    var resrcDirs = srcSetEntry.resources.sourceDirectories // access the resources directories
    resrcDirs.eachWithIndex { File rsDir, int rsDirIdx -> // look at each one (there's only gonna be one in this setup but whatever)
        var progPath = rsDir.toPath().resolve("programs")
        // look at each directory under programs
        file(progPath).listFiles().eachWithIndex { File prog, int idx ->
            // register a task to compile a single program
            // (tasks don't really take input so we just make a bunch of them, there's probably a better way to do this?)
            dependsOn( // we depend on this task so that it actually happens.
                tasks.register("sampleCompile${idx}_${rsDirIdx}", JavaCompile) {

                    // can set it to compile programs java 8 compat level if desired.
                    // sourceCompatibility = JavaVersion.VERSION_1_8
                    // targetCompatibility = JavaVersion.VERSION_1_8

                    // figure out where to dump the .class files after
                    var relPath = new File("resources").toPath()
                            .resolve(srcSetEntry.name)
                            .resolve("compiledprograms")
                            .resolve(progPath.relativize(prog.toPath()))
                    var outPath = layout.buildDirectory.dir(relPath.toString()).get().getAsFile()

                    // tell Java plugin where to find the program and where to put it.
                    source = files(prog)
                    classpath = files(prog)
                    destinationDirectory = outPath
                }
            )
        }
    }
}

// does this really need to happen before compiling java? no, but whatever it works.
// it's just to make sure our resources get in the right place at the right time.
compileJava{ dependsOn compileSamplePrograms}