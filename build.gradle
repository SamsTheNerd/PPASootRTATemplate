/**
 Template for Gradlew-y PSOFT projects
 */

// plugin for just running stuff
plugins {
    id "application"
    id 'java'
}
// java !
apply plugin : "java"
apply plugin: 'jacoco'

// repo we can yoink dependencies (like JUnit) from
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
//
//sourceSets {
//    main {
//        java {
//            srcDirs 'src'
//            exclude 'programs/**'
//        }
//    }
//
//    test {
//        java {
//            srcDirs 'src'
//            exclude 'programs/**'
//        }
//    }
//
//
//}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


// tell it what our Main file is. Needs full package name and class name.
// So src/main/java/hw0/folder/anotherFolder/RandomHello.java would be hw0.folder.anotherFolder.RandomHello
ext {
    // MAKE SURE YOU CHANGE THIS FOR YOUR PROJECT !!!
    // it needs to be a class with a main(String[] args) method
    javaMainClass = "analysis.RTA.RTA"
    // so for hw0 this might be `hw0.RandomHello`
}

// tell the Application plugin what our main class is
application {
    mainClassName = javaMainClass
}

// add JUnit
dependencies {
    // Use JUnit 4
    testImplementation 'junit:junit:4.13.2'
    implementation "org.soot-oss:soot:4.3.0"
}

// make the test task use JUnit
test {
    // Use JUnit Platform for unit tests.
    filter {
        //specific test class
        includeTestsMatching "analysis.RTA.RTATests"
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


task 'compileSamplePrograms'{
    sourceSets.eachWithIndex { SourceSet srcSetEntry, int srcIdx ->
        var resrcDirs = srcSetEntry.resources.sourceDirectories
        resrcDirs.eachWithIndex{ File rsDir, int rsDirIdx ->
            var progPath = rsDir.toPath().resolve("programs")
            file(progPath).listFiles().eachWithIndex{ prog, idx ->
                dependsOn(
                    tasks.create([name: "${idx}sampleCompile", type: JavaCompile], {
                        var relPath = progPath.relativize(prog.toPath())
//                        var outPath = file("${buildDir}/resources/main/compiledprograms/${relPath}")
//                        var outPath = srcSetEntry.resources.destinationDirectory.get().asFile.toPath().resolve(relPath)
                        var outPath = file(buildDir.toPath()
                                .resolve("resources")
                                .resolve(srcSetEntry.name)
                                .resolve("compiledprograms")
                                .resolve(relPath))
                        println prog
                        println relPath
                        println outPath
                        source = files(prog)
                        classpath = files(prog)
                        destinationDirectory = outPath
        //                source = fileTree(dir: prog, include: '**/*.java')
                    })
                )
            }
        }


    }
}

// does this really need to happen before compiling java? no, but whatever it works.
compileJava{ dependsOn compileSamplePrograms}